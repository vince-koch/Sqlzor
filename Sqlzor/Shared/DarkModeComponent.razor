@inject IJSRuntime _jsRuntime

<button class="btn btn-secondary" type="button" @onclick="HandleToggleColorMode" title="Toggle Dark Mode">
    <span class="oi @(_isDarkMode ? "oi-moon" : "oi-sun")" aria-hidden="true"></span>
</button>

@code {
    private bool _isDarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/DarkModeComponent.razor.js");
            await _jsRuntime.InvokeVoidAsync("darkMode_addMetaTag");
            _isDarkMode = await _jsRuntime.InvokeAsync<bool>("darkMode_isDarkMode");
            
            await ApplyColorMode();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleToggleColorMode()
    {
        _isDarkMode = !_isDarkMode;
        await ApplyColorMode();
    }

    private async Task ApplyColorMode()
    {
        await _jsRuntime.InvokeVoidAsync("darkMode_setDarkMode", _isDarkMode);

        var theme = _isDarkMode ? "vs-dark" : "vs";
        await MonacoEditor.SetTheme(theme);
        await _jsRuntime.InvokeVoidAsync("monaco.editor.setTheme", theme);
    }
}
