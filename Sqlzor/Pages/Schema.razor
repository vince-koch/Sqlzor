@page "/schema"

@using System.Data;
@using System.Linq;

@using Sqlzor.Data;

@inject SchemaApi _schemaApi;

<h1>Schema</h1>

<div class="form-group">
    <label>Connection Name</label>
    <ConnectionNameSelect @bind-ConnectionName="@connectionName" />
</div>

@*
<div class="form-group">
    <label>Collection Name</label>
    <input class="form-control" type="text" @bind="collectionName">
</div>

<div class="form-group">
    <label>Restriction Values</label>
    <textarea class="form-control" id="queryTextArea" rows="10" @bind="restrictionValues" @bind:event="oninput" />
</div>
*@

<div class="form-group">
    <button type="button" class="btn btn-primary" @onclick="HandleGetSchema"
            disabled="@string.IsNullOrWhiteSpace(connectionName)">
        <span class="oi oi-play-circle"></span> Get Schema
    </button>
</div>

@if (isExecuting || tables != null || exception != null)
{
    <h1>Results</h1>
}

@if (isExecuting)
{
    <div class="align-middle">
        <span class="spinner-border" role="status" aria-hidden="true"></span>
        Loading...
    </div>
}

@if (tables != null)
{
    foreach (var table in tables)
    {
        <DataTableComponent Table="@table" />
    }
}

<ExceptionComponent Exception="@exception" />

@code {
    private string connectionName = string.Empty;
    private string collectionName = string.Empty;
    private string restrictionValues = string.Empty;

    private bool isExecuting = false;
    private DataTable[] tables = null;
    private Exception exception = null;

    private async Task HandleGetSchema()
    {
        try
        {
            isExecuting = true;
            tables = null;
            exception = null;

            var restrictions = restrictionValues
                .Replace("\r\n", "\n")
                .Split('\n')
                .Where(item => !string.IsNullOrWhiteSpace(item))
                .ToArray();

            tables = await _schemaApi.GetSchemaTablesAsync(
                connectionName,
                collectionName,
                restrictions);
        }
        catch (Exception thrown)
        {
            exception = thrown;
        }
        finally
        {
            isExecuting = false;
        }
    }
}
