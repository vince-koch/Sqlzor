@page "/query"

@using System.Data;
@using System.Diagnostics;
@using Sqlzor.Data;

@inject IJSRuntime _jsRuntime;
@inject QueryApi _queryApi;
@inject AppSettingsService _appSettings;

<h1>Query</h1>

<div class="form-group">
    <label>Connection Name</label>
    <ConnectionNameSelect @bind-ConnectionName="@connectionName" />
</div>

<div class="form-group">
    <label for="queryTextArea">Query</label>
    <textarea class="form-control" id="queryTextArea" rows="10"
              @bind="queryText" @bind:event="oninput"
              style="font-family: Consolas,Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;" />
</div>

<div class="form-group">
    <button type="button" id="queryExecuteButton" class="btn btn-primary"
            disabled="@(connectionName == string.Empty || queryText == string.Empty)"
            @onclick="HandleExecuteQuery">
        <span class="oi oi-play-circle"></span> Execute
    </button>
</div>

@if (isExecuting || table != null || exception != null)
{
    <h1>Results</h1>
}

@if (isExecuting)
{
    <div class="align-middle">
        <span class="spinner-border" role="status" aria-hidden="true"></span>
        Loading...
    </div>
}

<DataTableComponent Table="@table" />
<ExceptionComponent Exception="@exception" />

@code {
    private string connectionName = string.Empty;
    private string queryText = null;

    private bool isExecuting = false;
    private DataTable table = null;
    private Exception exception = null;

    protected override Task OnInitializedAsync()
    {
        queryText = _appSettings.InitialQueryText;
        return Task.FromResult(true);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Debug.WriteLine(string.Format("OnAfterRender => {0} [_jsRuntime={1}]", firstRender, _jsRuntime));
            _jsRuntime.InvokeVoidAsync("configureTextEditor", "queryTextArea", "queryExecuteButton");
        }
    }

    private async Task HandleExecuteQuery()
    {
        try
        {
            isExecuting = true;
            table = null;
            exception = null;

            table = await _queryApi.ExecuteAsync(
                connectionName,
                queryText);
        }
        catch (Exception thrown)
        {
            exception = thrown;
        }
        finally
        {
            isExecuting = false;
        }
    }
}
