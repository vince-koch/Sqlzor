@page "/schema"

@using System.Data;
@using System.Diagnostics;
@using System.Linq;

@using Sqlzor.Data;

@inject SchemaApi _schemaApi;

<h1>Schema</h1>

<div class="form-group">
    <label>Connection Name</label>
    <ConnectionNameSelect @bind-ConnectionName="@connectionName" />
</div>

<div class="form-group">
    <label>Collection Name</label>
    <input class="form-control" type="text" @bind="collectionName">
</div>

<div class="form-group">
    <label>Restriction Values</label>
    <textarea class="form-control" id="queryTextArea" rows="10" @bind="restrictionValues" @bind:event="oninput" />
</div>

<div class="form-group">
    <button type="button" class="btn btn-primary" @onclick="HandleGetSchema"
            disabled="@string.IsNullOrWhiteSpace(connectionName)">
        <span class="fas fa-play"></span> Get Schema
    </button>
</div>

<BusyComponent IsBusy="@isBusy" />
<QueryResultsComponent Error="@exception" Tables="@tables" Elapsed="@elapsed" />

@code {
    private string connectionName = string.Empty;
    private string collectionName = string.Empty;
    private string restrictionValues = string.Empty;

    private bool isBusy = false;
    private DataTable[] tables = null;
    private Exception exception = null;
    private TimeSpan? elapsed = null;

    private async Task HandleGetSchema()
    {
        isBusy = true;
        tables = null;
        exception = null;
        elapsed = null;

        var stopwatch = new Stopwatch();
        stopwatch.Start();

        try
        {
            var restrictions = restrictionValues
                .Replace("\r\n", "\n")
                .Split('\n')
                .Where(item => !string.IsNullOrWhiteSpace(item))
                .ToArray();

            tables = await _schemaApi.GetSchemaTablesAsync(
                connectionName,
                collectionName,
                restrictions);
        }
        catch (Exception thrown)
        {
            exception = thrown;
        }
        finally
        {
            stopwatch.Stop();
            elapsed = stopwatch.Elapsed;
            isBusy = false;
        }
    }
}
