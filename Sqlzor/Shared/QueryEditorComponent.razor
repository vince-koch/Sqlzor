@using System.Diagnostics;

<MonacoEditor @ref="_editor" Id="@componentId" 
        ConstructionOptions="CreateEditorConstructionOptions"
        OnDidChangeCursorPosition="EditorDidChangeCursorPosition" 
        OnKeyDown="HandleKeyDown"
        CssClass="monaco" />

@code {
    private string componentId = "queryEditor" + Guid.NewGuid().ToString().Replace("-", string.Empty);
    private MonacoEditor _editor;

    [Parameter] public string QueryText { get; set; }
    [Parameter] public EventCallback<string> QueryTextChanged { get; set; }

    private StandaloneEditorConstructionOptions CreateEditorConstructionOptions(MonacoEditor editor)
    {
        MonacoEditor.SetTheme("vs-dark");

        var options = new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "sql",
            Value = "SELECT *\n"
            + "    FROM Artist\n"
        };

        return options;
    }

    private async Task EditorDidChangeCursorPosition(CursorPositionChangedEvent eventArgs)
    {
        QueryText = await _editor.GetValue();
        Debug.WriteLine($"Position = {eventArgs.Position.Column}, {eventArgs.Position.LineNumber}, QueryText={QueryText}");
        await QueryTextChanged.InvokeAsync(QueryText);
    }

    private void HandleKeyDown(KeyboardEvent e)
    {
        Debug.WriteLine($"{e.KeyCode}");
    }

    private async Task OnQueryTextInput(ChangeEventArgs e)
    {
        Debug.WriteLine($"OnQueryTextInput => {e.Value as string}");
        await QueryTextChanged.InvokeAsync(e.Value as string);
    }
}
