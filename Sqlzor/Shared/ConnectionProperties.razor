@using Sqlzor.Api;

@inject IConnectionStringService _connectionStringService;
@inject ISessionService _sessionService;

<div>
    <ExceptionComponent Exception="@error" />

    <div class="form-check">
        <input class="form-check-input" type="radio" name="connectionTypeRadio"
                checked="@(connectionType == ConnectionType.ConnectionName)"
                @onchange="@(e => connectionType = ConnectionType.ConnectionName)"/>
        <div>
            <h4><label class="form-check-label" for="flexRadioDefault1">Named Connection</label></h4>

            <div class="form-group">
                <select class="form-control" @bind="@connectionName" disabled="@(connectionType != ConnectionType.ConnectionName)">
                    <option disabled selected value=""> -- Select a Connection -- </option>
                    @if (connectionNames != null)
                    {
                        @foreach (var connectionName in connectionNames.OrderBy(item => item))
                        {
                            <option value="@connectionName">@connectionName</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="form-check">
        <input class="form-check-input" type="radio" name="connectionTypeRadio"
                checked="@(connectionType == ConnectionType.ConnectionString)"
                @onchange="@(e => connectionType = ConnectionType.ConnectionString)" />
        <div>
            <h4><label class="form-check-label" for="flexRadioDefault1">Connection String</label></h4>

            <div class="form-group">
                <input type="text" class="form-control" placeholder="--- Enter Session Name ---"
                    disabled="@(connectionType != ConnectionType.ConnectionString)"
                    @bind="sessionName" />
            </div>

            <div class="form-group">
                <select class="form-control" @bind="driverName" disabled="@(connectionType != ConnectionType.ConnectionString)">
                    <option disabled selected value=""> -- Select a Driver -- </option>
                    @if (driverNames != null)
                    {
                        @foreach (var driverName in driverNames.OrderBy(item => item))
                        {
                            <option value="@driverName">@driverName</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group">
                <input type="text" class="form-control" placeholder="--- Enter Connection String ---"
                    disabled="@(connectionType != ConnectionType.ConnectionString)"
                    @bind="connectionString" />
            </div>
        </div>
    </div>

    <div class="form-group">
        <button type="button" class="btn btn-primary"
                disabled="@( !CalculateCanConnect() )"
                @onclick="HandleConnect">
            <span class="fas fa-plus"></span> Connect
        </button>
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<Guid> OnConnected { get; set; }

    private enum ConnectionType
    {
        ConnectionName,
        ConnectionString
    }

    private string[] connectionNames;
    private string[] driverNames;
    private Exception error = null;
    private bool isBusy = false;
    private ConnectionType connectionType = ConnectionType.ConnectionName;
    private string connectionName = string.Empty;
    private string sessionName = string.Empty;
    private string driverName = string.Empty;
    private string connectionString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        connectionNames = await _connectionStringService.GetConnectionNames();
        driverNames = await _connectionStringService.GetDriverNames();
    }

    private bool CalculateCanConnect()
    {
        if (!isBusy)
        {
            if (connectionType == ConnectionType.ConnectionName
                && !string.IsNullOrWhiteSpace(connectionName))
            {
                return true;            
            }

            if (connectionType == ConnectionType.ConnectionString
                && !string.IsNullOrWhiteSpace(driverName)
                && !string.IsNullOrWhiteSpace(connectionString))
            {
                return true;
            }
        }

        return false;
    }

    private async Task HandleConnect()
    {
        try
        {
            isBusy = true;
            error = null;

            var session = connectionType == ConnectionType.ConnectionName
                ? await _sessionService.OpenSession(connectionName)
                : await _sessionService.OpenSession(sessionName, driverName, connectionString);

            await OnConnected.InvokeAsync(session.SessionId);
        }
        catch (Exception thrown)
        {
            error = thrown;
        }
        finally
        {
            isBusy = false;
        }
    }
}
