@page "/schema"

@using System.Data
@using System.Linq

@using Sqlzor.Data

@inject QueryService _queryService

<h1>Schema</h1>

<div class="form-group">
    <label>Connection Name</label>
    <ConnectionNameSelect @bind-ConnectionName="@connectionName" />
</div>

<div class="form-group">
    <label>Collection Name</label>
    <input class="form-control" type="text" @bind="collectionName">
</div>

<div class="form-group">
    <label>Restriction Values</label>
    <textarea class="form-control" id="queryTextArea" rows="10" @bind="restrictionValues" @bind:event="oninput" />
</div>

<div class="form-group">
    <button type="button" class="btn btn-primary" @onclick="HandleGetSchema"
            disabled="@string.IsNullOrWhiteSpace(connectionName)">
        <span class="oi oi-play-circle"></span> Get Schema
    </button>
</div>

@if (isExecuting || table != null || exception != null)
{
    <h1>Results</h1>
}

@if (isExecuting)
{
    <div class="align-middle">
        <span class="spinner-border" role="status" aria-hidden="true"></span>
        Loading...
    </div>
}

@if (table != null)
{
    <table class="table table-sm table-light table-striped" style="font-size: x-small">
        <thead>
            <tr>
                @foreach (var column in table.Columns.Cast<DataColumn>())
                {
                    <th>@column.ColumnName</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in table.Rows.Cast<DataRow>())
            {
                <tr>
                    @foreach (var item in row.ItemArray)
                    {
                        <td>@item</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@if (exception != null)
{
    <ExceptionComponent Exception="@exception" />
}

@code {
    private string connectionName = string.Empty;
    private string collectionName = string.Empty;
    private string restrictionValues = string.Empty;

    private bool isExecuting = false;
    private DataTable table = null;
    private Exception exception = null;

    private async Task HandleGetSchema()
    {
        try
        {
            isExecuting = true;
            table = null;

            var restrictions = restrictionValues
                .Replace("\r\n", "\n")
                .Split('\n')
                .Where(item => !string.IsNullOrWhiteSpace(item))
                .ToArray();

            table = await _queryService.GetSchemaAsync(
                connectionName,
                collectionName,
                restrictions);
        }
        catch (Exception thrown)
        {
            exception = thrown;
        }
        finally
        {
            isExecuting = false;
        }
    }
}
