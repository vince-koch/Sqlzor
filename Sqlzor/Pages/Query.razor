@page "/session/{SessionId}"

@using System.Data;
@using System.Diagnostics;

@using Sqlzor.Api;
@using Sqlzor.Api.Models;

@inject ISessionService _sessionService;
@inject IAppSettingsService _appSettings;

<h1>Query</h1>

<div class="form-group">
    <label for="queryTextArea">Query</label>
    <QueryEditorComponent @bind-QueryText="@queryText" />
</div>

<div class="form-group">
    <button type="button" id="queryExecuteButton" class="btn btn-primary"
            disabled="@(isBusy || string.IsNullOrWhiteSpace(queryText))"
            @onclick="HandleExecuteQuery">
        <span class="fas fa-play"></span> Execute
    </button>
</div>

<BusyComponent IsBusy="@isBusy" />
<QueryResultsComponent Error="@error" Tables="@tables" Elapsed="@elapsed" />

@code {
    [Parameter]
    public string SessionId { get; set; }

    private SessionModel Session;

    private string queryText = null;

    private bool isBusy = false;
    private TimeSpan? elapsed = null;
    private DataTable[] tables = null;
    private Exception error = null;

    protected override Task OnInitializedAsync()
    {
        var sessionId = Guid.Parse(SessionId);
        Session = _sessionService.GetSession(sessionId);
        return Task.FromResult(true);
    }

    private async Task HandleExecuteQuery()
    {
        var stopwatch = new Stopwatch();
        stopwatch.Start();

        isBusy = true;
        elapsed = null;
        tables = null;
        error = null;

        try
        {
            tables = await _sessionService.ExecuteQuery(
                Session.SessionId,
                queryText);
        }
        catch (Exception thrown)
        {
            error = thrown;
        }
        finally
        {
            stopwatch.Stop();

            elapsed = stopwatch.Elapsed;
            isBusy = false;
        }
    }
}
