@page "/session/{SessionId}"

@using System.Data;
@using System.Diagnostics;

@using Sqlzor.Api;
@using Sqlzor.Api.Models;
@using Sqlzor.DbSchema.Models;

@inject ISessionService _sessionService;
@inject IAppSettingsService _appSettings;
@inject ProtectedSessionStorage _protectedSessionStore

<CascadingValue Name="ClientState" Value="@_state">
    <div class="top-row">
        <!-- left -->
        <div class="col justify-content-start">
            <h3><nobr>@_state.Session.SessionName</nobr></h3>
        </div>

        <!-- center -->
        <div class="col text-center">
            <button type="button" class="btn btn-primary" title="Execute Query (F5)"
                    disabled="@(_state.IsBusy || string.IsNullOrWhiteSpace(_state.QueryText))"
                    @onclick="HandleExecuteQuery">
                <span class="fas fa-play"></span> Execute
            </button>
        </div>

        <!-- right -->
        <div class="col text-right">
            <div title="Cursor Position">@( $"Ln: {_state.CursorY}   Col: {_state.CursorX}" )</div>
        </div>
    </div>

    <div class="content px-4">
        <div class="row">
            <div class="col">
                <div class="form-group">
                    <Tree Node="@_state.Session.Schema"
                            HasChildNodes="item => item.Children.Any()"
                            ChildSelector="item => item.Children">
                        <TitleTemplate><i class="@GetIconClass(context)"></i> @context.Name?.Trim('.')</TitleTemplate>
                    </Tree>
                </div>
            </div>
            <div class="col-9">
                <div class="form-group">
                    <MonacoEditor @ref="_editor" Id="monacoEditor" 
                            ConstructionOptions="CreateEditorConstructionOptions"
                            OnDidChangeCursorPosition="HandleDidChangeCursorPosition" 
                            OnKeyDown="HandleKeyDown"
                            CssClass="monaco" />
                </div>
            </div>
        </div>

        <BusyComponent IsBusy="@_state.IsBusy" />
        <QueryResultsComponent Error="@_state.Error" Tables="@_state.Tables" Elapsed="@_state.Elapsed" />
    </div>

</CascadingValue>

@code {
    private static Dictionary<Guid, ClientStateModel> _allClientState = new Dictionary<Guid, ClientStateModel>();

    [Parameter]
    public string SessionId { get; set; }

    private ClientStateModel _state;

    private MonacoEditor _editor;

    protected override async Task OnParametersSetAsync()
    {
        var sessionId = Guid.Parse(SessionId);

        if (!_allClientState.TryGetValue(sessionId, out var clientState))
        {
            var sessionModel = _sessionService.GetSession(sessionId);
            clientState = new ClientStateModel(sessionModel);
            _allClientState.Add(sessionId, clientState);
        }

        if (clientState.Session.Schema == null)
        {
            clientState.Session = await _sessionService.RefreshHierarchy(sessionId);
        }

        _state = clientState;

        if (_editor != null)
        {
            await _editor.SetValue(_state.QueryText);
        }
    }

    private StandaloneEditorConstructionOptions CreateEditorConstructionOptions(MonacoEditor editor)
    {
        MonacoEditor.SetTheme("vs-dark");

        var options = new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "sql",
            Value = _state.QueryText
        };

        return options;
    }

    private async Task HandleExecuteQuery()
    {
        var stopwatch = new Stopwatch();
        stopwatch.Start();

        _state.IsBusy = true;
        _state.Elapsed = null;
        _state.Tables = null;
        _state.Error = null;

        try
        {
            _state.Tables = await _sessionService.ExecuteQuery(
                _state.SessionId,
                _state.QueryText);
        }
        catch (Exception thrown)
        {
            _state.Error = thrown;
        }
        finally
        {
            stopwatch.Stop();

            _state.Elapsed = stopwatch.Elapsed;
            _state.IsBusy = false;
        }
    }

    private async Task HandleDidChangeCursorPosition(CursorPositionChangedEvent eventArgs)
    {
        _state.CursorX = eventArgs.Position.Column;
        _state.CursorY = eventArgs.Position.LineNumber;
        _state.QueryText = await _editor.GetValue();
    }

    private async Task HandleKeyDown(KeyboardEvent e)
    {
        if (e.KeyCode == KeyCode.F5)
        {
            await HandleExecuteQuery();
        }
    }

    private string GetIconClass(Node node)
    {
        switch (node.Model?.GetType()?.Name)
        {
            case null:
                return "fas fa-folder";

            case nameof(ColumnModel):
            case nameof(IndexColumnModel):
            case nameof(ViewColumnModel):
                return "fas fa-columns";

            case nameof(DatabaseModel):
                return "fas fa-database";

            case nameof(DataSourceInformationModel):
                return "fas fa-plug";

            case nameof(ForeignKeyModel):
            case nameof(IndexModel):
                return "fas fa-key";

            case nameof(ProcedureModel):
                return "fas fa-code";

            case nameof(TableModel):
            case nameof(ViewModel):
                return "fas fa-table";

            case nameof(UserModel):
                return "fas fa-user";

            default:
                return "fas fa-question";
        }
    }
}
