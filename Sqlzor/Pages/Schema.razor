@page "/schema"

@using System.Data;
@using System.Diagnostics;
@using System.Linq;

@using Sqlzor.Data;

@inject SchemaApi _schemaApi;

<h1>Schema</h1>

<div class="form-group">
    <label>Connection Name</label>
    <ConnectionNameSelect @bind-ConnectionName="@connectionName" />
</div>

<div class="form-group">
    <label>Collection Name</label>
    <input class="form-control" type="text" @bind="collectionName">
</div>

<div class="form-group">
    <label>Restriction Values</label>
    <textarea class="form-control" id="queryTextArea" rows="3" @bind="restrictionValues" @bind:event="oninput" />
</div>

<div class="form-group">
    <button type="button" class="btn btn-primary" @onclick="e => HandleGetSchemaTables(true)"
            disabled="@string.IsNullOrWhiteSpace(connectionName)">
        <span class="fas fa-play"></span> Get Schema Tables
    </button>

    <button type="button" class="btn btn-primary" @onclick="HandleMapTables"
            disabled="@(tables == null)">
        <span class="fas fa-play"></span> Map Tables
    </button>
</div>

<BusyComponent IsBusy="@isBusy" />
<QueryResultsComponent Error="@error" Tables="@tables" Elapsed="@elapsed" />

@code {
    private string connectionName = string.Empty;
    private string collectionName = string.Empty;
    private string restrictionValues = string.Empty;

    private bool isBusy = false;
    private DataTable[] tables = null;
    private Exception error = null;
    private TimeSpan? elapsed = null;

    private async Task HandleGetSchemaTables(bool isRawRequested)
    {
        isBusy = true;
        tables = null;
        error = null;
        elapsed = null;

        var stopwatch = new Stopwatch();
        stopwatch.Start();

        try
        {
            var restrictions = restrictionValues
                .Replace("\r\n", "\n")
                .Split('\n')
                .Where(item => !string.IsNullOrWhiteSpace(item))
                .ToArray();

            if (isRawRequested)
            {
                tables = await _schemaApi.GetSchemaTablesAsync(
                    connectionName,
                    collectionName,
                    restrictions);
            }
            else
            {
                var schema = await _schemaApi.GetSchemaAsync(connectionName);
                tables = schema.SourceDataTables;
            }

            tables = tables.OrderBy(item => item.TableName).ToArray();
        }
        catch (Exception thrown)
        {
            error = thrown;
        }
        finally
        {
            stopwatch.Stop();
            elapsed = stopwatch.Elapsed;
            isBusy = false;
        }
    }

    private async Task HandleMapTables()
    {
        try
        {
            var schema = await _schemaApi.MapTables(connectionName, tables);
        }
        catch (Exception thrown)
        {
            error = thrown;
        }
    }
}
