@page "/session/{SessionId}"

@using System.Data;
@using System.Diagnostics;

@using Sqlzor.Api;
@using Sqlzor.Api.Models;
@using Sqlzor.DbSchema.Models;

@inject ISessionService _sessionService;
@inject IAppSettingsService _appSettings;

<div class="row">
    <div class="col">
        <div class="form-group">
            <Tree Nodes="Schema"
                    HasChildNodes="item => item.Children.Any()"
                    ChildSelector="item => item.Children">
                <TitleTemplate><i class="@GetIconClass(context)"></i> @context.Name?.Trim('.')</TitleTemplate>
            </Tree>
        </div>
    </div>
    <div class="col-9">
        <div class="form-group">
            <label for="queryTextArea">Query @( $"({queryCursorX}, {queryCursorY})" )</label>
            <QueryEditorComponent @bind-QueryText="@queryText" OnCursorPositionChanged="HandleCursorPositionChanged" />
        </div>
    </div>
</div>

<div class="form-group">
    <button type="button" id="queryExecuteButton" class="btn btn-primary"
            disabled="@(isBusy || string.IsNullOrWhiteSpace(queryText))"
            @onclick="HandleExecuteQuery">
        <span class="fas fa-play"></span> Execute
    </button>
</div>

<BusyComponent IsBusy="@isBusy" />
<QueryResultsComponent Error="@error" Tables="@tables" Elapsed="@elapsed" />

@code {
    [Parameter]
    public string SessionId { get; set; }

    private SessionModel Session;
    private Node[] Schema;

    private string queryText = null;
    private int queryCursorX = 0;
    private int queryCursorY = 0;

    private bool isBusy = false;
    private TimeSpan? elapsed = null;
    private DataTable[] tables = null;
    private Exception error = null;

    protected override async Task OnParametersSetAsync()
    {
        var sessionId = Guid.Parse(SessionId);
        Session = _sessionService.GetSession(sessionId);

        if (Session.Schema == null)
        {
            Session = await _sessionService.RefreshHierarchy(sessionId);
        }

        Schema = new Node[] { Session.Schema };
    }

    private async Task HandleExecuteQuery()
    {
        var stopwatch = new Stopwatch();
        stopwatch.Start();

        isBusy = true;
        elapsed = null;
        tables = null;
        error = null;

        try
        {
            tables = await _sessionService.ExecuteQuery(
                Session.SessionId,
                queryText);
        }
        catch (Exception thrown)
        {
            error = thrown;
        }
        finally
        {
            stopwatch.Stop();

            elapsed = stopwatch.Elapsed;
            isBusy = false;
        }
    }

    private Task HandleCursorPositionChanged(BlazorMonaco.Position position)
    {
        queryCursorX = position.Column;
        queryCursorY = position.LineNumber;
        return Task.FromResult(true);
    }

    private string GetIconClass(Node node)
    {
        switch (node.Model?.GetType()?.Name)
        {
            case null:
                return "fas fa-folder";

            case nameof(ColumnModel):
            case nameof(IndexColumnModel):
            case nameof(ViewColumnModel):
                return "fas fa-columns";

            case nameof(DatabaseModel):
                return "fas fa-database";

            case nameof(DataSourceInformationModel):
                return "fas fa-plug";

            case nameof(ForeignKeyModel):
            case nameof(IndexModel):
                return "fas fa-key";

            case nameof(ProcedureModel):
                return "fas fa-code";

            case nameof(TableModel):
            case nameof(ViewModel):
                return "fas fa-table";

            case nameof(UserModel):
                return "fas fa-user";

            default:
                return "fas fa-question";
        }
    }
}
